---
title: "EDA and data visualization"
author: "Kishore Basu"
date: today
date-format: "DD/MM/YY"
format: 
    pdf:
      toc: true
      number-sections: true
---



```{r}
#| message: false
library(opendatatoronto)
library(tidyverse)
library(stringr)
library(skimr) # EDA
library(visdat) # EDA
library(janitor)
library(lubridate)
library(ggrepel)
```



```{r}
all_data <- list_packages(limit = 500) # find id of table we need
head(all_data)
```

Let's download the data on TTC subway delays in 2022. 


```{r}
res <- list_package_resources("996cfe8d-fb35-40ce-b569-698d51fc683b") # obtained code from searching data frame above
res <- res |> mutate(year = str_extract(name, "202.?"))
delay_2022_ids <- res |> filter(year==2022) |> select(id) |> pull()

delay_2022 <- get_resource(delay_2022_ids)

# make the column names nicer to work with
delay_2022 <- clean_names(delay_2022)
```
Let's also download the delay code and readme, as reference. 

```{r}
# note: I obtained these codes from the 'id' column in the `res` object above
delay_codes <- get_resource("3900e649-f31e-4b79-9f20-4731bbfd94f7")
delay_data_codebook <- get_resource("ca43ac3d-3940-4315-889b-a9375e7b8aa4")
```

This dataset has a bunch of interesting variables. You can refer to the readme for descriptions. Our outcome of interest is `min_delay`, which give the delay in mins. 

```{r}
head(delay_2022)
```


```{r}
delay_2022 <- delay_2022 %>% distinct()
```

```{r}
## Removing the observations that have non-standardized lines

delay_2022 <- delay_2022 |> filter(line %in% c("BD", "YU", "SHP", "SRT"))

```


```{r}
delay_2022 <- delay_2022 |> 
  left_join(delay_codes |> rename(code = `SUB RMENU CODE`, code_desc = `CODE DESCRIPTION...3`) |> select(code, code_desc)) 


delay_2022 <- delay_2022 |>
  mutate(code_srt = ifelse(line=="SRT", code, "NA")) |> 
  left_join(delay_codes |> rename(code_srt = `SRT RMENU CODE`, code_desc_srt = `CODE DESCRIPTION...7`) |> select(code_srt, code_desc_srt))  |> 
  mutate(code = ifelse(code_srt=="NA", code, code_srt),
         code_desc = ifelse(is.na(code_desc_srt), code_desc, code_desc_srt)) |> 
  select(-code_srt, -code_desc_srt)
```

The largest delay is due to "Signals Other".

```{r}
delay_2022 |> 
  left_join(delay_codes |> rename(code = `SUB RMENU CODE`, code_desc = `CODE DESCRIPTION...3`) |> select(code, code_desc)) |> 
  arrange(-min_delay) |> 
  select(date, time, station, line, min_delay, code, code_desc)
```






# Lab Exercises

To be handed in via submission of quarto file (and rendered pdf) to GitHub.

1. Using the `delay_2022` data, plot the five stations with the highest mean delays. Facet the graph by `line`

```{r}
delay_2022 %>% 
  group_by(station) %>% 
  summarize(station, mean_delay = mean(min_delay, na.rm = T), line) %>% 
  arrange(-mean_delay) %>% 
  head(5)%>% 
  ggplot(aes(x = station, y = mean_delay)) + 
  geom_bar(stat = "identity") + 
  theme(axis.text.x = element_text(angle = 90))+ 
  facet_grid(vars(line))
```


2. Using the `opendatatoronto` package, download the data on mayoral campaign contributions for 2014. Hints:
    + find the ID code you need for the package you need by searching for 'campaign' in the `all_data` tibble above
    + you will then need to `list_package_resources` to get ID for the data file
    + note: the 2014 file you will get from `get_resource` has a bunch of different campaign contributions, so just keep the data that relates to the Mayor election
    
```{r}
all_data <- list_packages(limit = 500) # find id of table we need
all_data
```

```{r}
id <- 'f6651a40-2f52-46fc-9e04-b760c16edd5c'
res <- list_package_resources(id)
res
```
```{r}
get_resource("5b230e92-0a22-4a15-9572-0b19cc222985")
```

```{r}
#res <- res |> mutate(year = str_extract(name, "202.?"))
df_id <- res |> select(id) |> pull()

df <- get_resource('5b230e92-0a22-4a15-9572-0b19cc222985')
df <- df['2_Mayor_Contributions_2014_election.xls'][[1]]
head(df)
```
    
3. Clean up the data format (fixing the parsing issue and standardizing the column names using `janitor`)
```{r}
names(df) <- df[1,]
df <- df[2:dim(df)[1],1:dim(df)[2]]
```

```{r}
df <- clean_names(df)
```

```{r}
#df <- df %>% 
 # select(-contributors_address)
```

```{r}
head(df)
```


4. Summarize the variables in the dataset. Are there missing values, and if so, should we be worried about them? Is every variable in the format it should be? If not, create new variable(s) that are in the right format.

```{r}
skim(df)
```

As we can see there are many missing values in the dataset. This is very worrying, as some relationships such as `relationship_to_candidate` might be very influential but we are not able to account for this influence due to a dearth of data. Note that contribution amount should be in floating point precision, so we change that. 

```{r}
df['contribution_amount'] <- as.numeric(df$contribution_amount)
```


5. Visually explore the distribution of values of the contributions. What contributions are notable outliers? Do they share a similar characteristic(s)? It may be useful to plot the distribution of contributions without these outliers to get a better sense of the majority of the data. 

First, let's look at outliers on a log-scale. 

```{r}
df %>% 
  ggplot(aes(y = log(contribution_amount), color = contribution_type_desc)) + 
  geom_boxplot(outlier.color = 'black', outlier.shape = 16, outlier.size = 2, notch = FALSE) +
  facet_wrap(~contributor_type_desc)
```
There are a lot! Notice that all of these appear to be donated by individuals rather than corporations. This could be because corporations are limited by how much they can legally donate (so they might have large contributions but not outlying large contributions). In addition, they are all monetary donations rather than goods and services.

Let's plot the contribution amount without these outliers. We see that corporations tend to contribute more on average!

```{r}
df %>% 
  filter(between(contribution_amount, mean(contribution_amount, na.rm=TRUE) - (1.0 * sd(contribution_amount, na.rm=TRUE)), mean(contribution_amount, na.rm=TRUE) + (1.0 * sd(contribution_amount, na.rm=TRUE)))) %>% 
  ggplot() + 
  geom_density(aes(x = contribution_amount, color = contributor_type_desc)) + 
  scale_x_log10() + 
  theme_bw()
```
For context, here is without outlier removal. 

```{r}
df %>% 
  ggplot() + 
  geom_density(aes(x = contribution_amount, color = contributor_type_desc)) + 
  scale_x_log10() + 
  theme_bw()
```



6. List the top five candidates in each of these categories:
    + total contributions
    + mean contribution
    + number of contributions
    
```{r}
df %>% 
  group_by(contributors_name) %>% 
  summarize(total_contr = sum(contribution_amount), mean_contr = mean(contribution_amount), num_contr = length(contribution_amount)) %>% 
  arrange(-total_contr) %>% 
  head(5)
```

```{r}
df %>% 
  group_by(contributors_name) %>% 
  summarize(total_contr = sum(contribution_amount), mean_contr = mean(contribution_amount), num_contr = length(contribution_amount)) %>% 
  arrange(-mean_contr) %>% 
  head(5)
```

```{r}
df %>% 
  group_by(contributors_name) %>% 
  summarize(total_contr = sum(contribution_amount), mean_contr = mean(contribution_amount), num_contr = length(contribution_amount)) %>% 
  arrange(-num_contr) %>% 
  head(5)
```
  
7. Repeat 5 but without contributions from the candidates themselves.
```{r}
df %>% 
  group_by(contributors_name) %>% 
  summarize(candidate, total_contr = sum(contribution_amount), mean_contr = mean(contribution_amount), num_contr = length(contribution_amount)) %>% 
  filter(candidate != contributors_name) %>% 
  arrange(-total_contr) %>% 
  distinct(contributors_name) %>% 
  head(5)
```
```{r}
df %>% 
  group_by(contributors_name) %>% 
  summarize(candidate, total_contr = sum(contribution_amount), mean_contr = mean(contribution_amount), num_contr = length(contribution_amount)) %>% 
  filter(candidate != contributors_name) %>% 
  arrange(-mean_contr) %>% 
  distinct(contributors_name) %>% 
  head(5)
```
```{r}
df %>% 
  group_by(contributors_name) %>% 
  summarize(candidate, total_contr = sum(contribution_amount), mean_contr = mean(contribution_amount), num_contr = length(contribution_amount)) %>% 
  filter(candidate != contributors_name) %>% 
  arrange(-num_contr) %>% 
  distinct(contributors_name) %>% 
  head(5)
```


8. How many contributors gave money to more than one candidate? 

```{r}
df %>% 
  group_by(contributors_name) %>% 
  summarize(num_donation = length(unique(candidate))) %>% 
  filter(num_donation > 1) %>% 
  dim()
```
So 184 contributors gave money to more than one candidate. 



